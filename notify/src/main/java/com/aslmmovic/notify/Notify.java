/*
 * Modifications Copyright (c) 2018 Razeware LLC
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
package com.aslmmovic.notify;


import android.content.Context;
import android.os.AsyncTask;
import android.util.Log;

import com.aslmmovic.notify.common.Constants;
import com.aslmmovic.notify.common.SharedPrefrencesManager;

import org.json.JSONObject;

import static com.aslmmovic.notify.common.Constants.TAG_TRACK;

/**
 * The Library is called Notify , it's used to get the token generated from.
 * Firebase , Save it locally , and retireve it through Method (get Token)
 *
 * also can send Token to Special WebService , it's for now Static one  to  : http://api.pushbots.com/2/subscriptions
 * But could be enhanced to get the dynamic links from the developer
 *
 */
public class Notify {


    /**
     *
     * @param context method to retrieve the token generated by passing to it the Context
     */

    public void getToken(Context context) {
        String tok = SharedPrefrencesManager.getInstance(context).getToken();
        Log.i(TAG_TRACK, "your Generated Token is " + tok);

    }


    /**
     *
     *
     * @param context method to send the token automatically to webservice
     *                statically made to :http://api.pushbots.com/2/subscriptions
     *                used AsyncTask to handle making network request on different
     *                Thread away from mainThread ..
     */
    public static void sendTokenToWebService(Context context) {
        String tokenGenerated = SharedPrefrencesManager.getInstance(context).getToken();
        new RequestAsync().execute(tokenGenerated);
    }
}


class RequestAsync extends AsyncTask<String, String, String> {
    @Override
    protected void onPreExecute() {
        super.onPreExecute();
        Log.i(TAG_TRACK, Constants.PRE_LOADING);
    }

    @Override
    protected String doInBackground(String... strings) {
        try {
            // POST Request
            String tokenGenerated = strings[0];
            JSONObject postDataParams = new JSONObject();
            postDataParams.put(Constants.FIRST_PARAMETER, "1");
            postDataParams.put(Constants.SECOND_PARAMETER, tokenGenerated);
            String result = RequestHandler.sendPost(
                    Constants.URL,
                    postDataParams);
            return result;


        } catch (Exception e) {
            Log.i(TAG_TRACK, e.getMessage());
            return e.getMessage();
        }
    }

    /**
     *
     * @param s Response is Retrieved here in onPostExecute MEthod
     */
    @Override
    protected void onPostExecute(String s) {
        super.onPostExecute(s);
        Log.i(TAG_TRACK, "Request Reponse is " + s);
    }
}

